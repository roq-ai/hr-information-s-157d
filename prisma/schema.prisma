generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model attendance {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  attendance_date DateTime  @db.Date
  status          String    @db.VarChar(255)
  employee_id     String?   @db.Uuid
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  updated_at      DateTime  @default(now()) @db.Timestamp(6)
  employee        employee? @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model benefits {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  benefit_details String?   @db.VarChar(255)
  employee_id     String?   @db.Uuid
  created_at      DateTime  @default(now()) @db.Timestamp(6)
  updated_at      DateTime  @default(now()) @db.Timestamp(6)
  employee        employee? @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model company {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  description String?       @db.VarChar(255)
  image       String?       @db.VarChar(255)
  name        String        @db.VarChar(255)
  created_at  DateTime      @default(now()) @db.Timestamp(6)
  updated_at  DateTime      @default(now()) @db.Timestamp(6)
  user_id     String        @db.Uuid
  tenant_id   String        @db.VarChar(255)
  user        user          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  policy      policy[]
  recruitment recruitment[]
}

model employee {
  id                 String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  personal_details   String?       @db.VarChar(255)
  work_details       String?       @db.VarChar(255)
  emergency_contacts String?       @db.VarChar(255)
  user_id            String?       @db.Uuid
  created_at         DateTime      @default(now()) @db.Timestamp(6)
  updated_at         DateTime      @default(now()) @db.Timestamp(6)
  attendance         attendance[]
  benefits           benefits[]
  user               user?         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  offboarding        offboarding[]
  onboarding         onboarding[]
  payroll            payroll[]
  performance        performance[]
}

model offboarding {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  exit_interview   String?   @db.VarChar(255)
  final_settlement Int?
  employee_id      String?   @db.Uuid
  created_at       DateTime  @default(now()) @db.Timestamp(6)
  updated_at       DateTime  @default(now()) @db.Timestamp(6)
  employee         employee? @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model onboarding {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  paperwork   String?   @db.VarChar(255)
  induction   String?   @db.VarChar(255)
  employee_id String?   @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  employee    employee? @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model payroll {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  salary      Int
  employee_id String?   @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  employee    employee? @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model performance {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  kpi         Int?
  appraisal   Int?
  assessment  Int?
  employee_id String?   @db.Uuid
  created_at  DateTime  @default(now()) @db.Timestamp(6)
  updated_at  DateTime  @default(now()) @db.Timestamp(6)
  employee    employee? @relation(fields: [employee_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model policy {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  policy_details String?  @db.VarChar(255)
  handbook       String?  @db.VarChar(255)
  workflow       String?  @db.VarChar(255)
  company_id     String?  @db.Uuid
  created_at     DateTime @default(now()) @db.Timestamp(6)
  updated_at     DateTime @default(now()) @db.Timestamp(6)
  company        company? @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model recruitment {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_post     String?  @db.VarChar(255)
  applications String?  @db.VarChar(255)
  company_id   String?  @db.Uuid
  created_at   DateTime @default(now()) @db.Timestamp(6)
  updated_at   DateTime @default(now()) @db.Timestamp(6)
  company      company? @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id          String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email       String     @unique @db.VarChar(255)
  firstName   String?    @db.VarChar(255)
  lastName    String?    @db.VarChar(255)
  roq_user_id String     @db.VarChar(255)
  tenant_id   String     @db.VarChar(255)
  created_at  DateTime   @default(now()) @db.Timestamp(6)
  updated_at  DateTime   @default(now()) @db.Timestamp(6)
  company     company[]
  employee    employee[]
}
